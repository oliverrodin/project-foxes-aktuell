{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rasmu\\\\AktuellaGrupplabb\\\\project-foxes-aktuell\\\\frontend\\\\src\\\\Pages\\\\AddComment.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\nimport * as Yup from 'yup';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst database_id = '58d96ae9275547a7960f5cca7c93e836';\n\nconst CustomTextInput = _ref => {\n  _s();\n\n  let {\n    label,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), meta.touch && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(CustomTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = CustomTextInput;\n\nfunction AddComment() {\n  _s2();\n\n  const [project, setProject] = useState([]);\n  const [person, setPerson] = useState([]);\n  useEffect(() => {\n    axios.post(\"http://localhost:3001/getdatabase/project\").then(response => {\n      setProject(response.data);\n    });\n    axios.post(\"http://localhost:3001/getdatabase/people\").then(response => {\n      setPerson(response.data);\n    });\n  }, []);\n  console.log(project);\n\n  const onSubmit = data => {\n    fetch('http://localhost:3001/createtimereports', {\n      method: 'POST',\n      url: 'https://api.notion.com/v1/pages',\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": 'application/json'\n      }\n    });\n    console.log(JSON.stringify(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createReportPage\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        comment: \"\"\n      },\n      validationSchema: Yup.object().shape({\n        comment: Yup.string().required()\n      }),\n      onSubmit: (values, _ref2) => {\n        let {\n          setSubmitting,\n          resetForm\n        } = _ref2;\n        fetch('http://localhost:3001/createtimereports', {\n          method: 'POST',\n          url: 'https://api.notion.com/v1/pages',\n          body: JSON.stringify(values),\n          headers: {\n            \"Content-Type\": 'application/json'\n          }\n        }); // setTimeout(() => {\n        //   alert(JSON.stringify(values, null, 2))\n        //   resetForm();\n        //   setSubmitting(false)\n        // }, 2000)\n      },\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(CustomTextInput, {\n          label: \"Comment\",\n          name: \"comment\",\n          type: \"text\",\n          placeholder: \"ex. fixed this bug...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input\",\n          children: \"Comment:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"button\",\n          children: props.isSubmitting ? 'loading...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AddComment, \"zzS/aj0WczH3qBWvOt3f5Fycu0Q=\");\n\n_c2 = AddComment;\nexport default AddComment;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTextInput\");\n$RefreshReg$(_c2, \"AddComment\");","map":{"version":3,"sources":["C:/Users/rasmu/AktuellaGrupplabb/project-foxes-aktuell/frontend/src/Pages/AddComment.js"],"names":["React","useEffect","useState","Formik","Form","Field","ErrorMessage","useField","Yup","axios","database_id","CustomTextInput","label","props","field","meta","id","name","touch","error","AddComment","project","setProject","person","setPerson","post","then","response","data","console","log","onSubmit","fetch","method","url","body","JSON","stringify","headers","comment","object","shape","string","required","values","setSubmitting","resetForm","isSubmitting"],"mappings":"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","sourcesContent":["import {React, useEffect, useState}from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport axios from \"axios\";\r\n\r\nconst database_id = '58d96ae9275547a7960f5cca7c93e836'\r\n\r\nconst CustomTextInput = ({label, ...props}) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field}{...props} />\r\n      {meta.touch && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div> ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction AddComment() {\r\n    const [project, setProject] = useState([])\r\n    const [person, setPerson] = useState([])\r\n    useEffect(()  => {\r\n     axios.post(\"http://localhost:3001/getdatabase/project\").then((response) => {\r\n        setProject(response.data)\r\n        \r\n      }) \r\n\r\n      axios.post(\"http://localhost:3001/getdatabase/people\").then((response) => {\r\n        setPerson(response.data)\r\n        \r\n      }) \r\n      \r\n    }, [])\r\n\r\n    console.log(project)\r\n    \r\n    const onSubmit = (data) => {\r\n\r\n        fetch('http://localhost:3001/createtimereports',{\r\n        method: 'POST',\r\n        url: 'https://api.notion.com/v1/pages',\r\n        body: (\r\n          JSON.stringify(data)),\r\n        headers: { \"Content-Type\": 'application/json' }\r\n      }) \r\n      \r\n       console.log(JSON.stringify(data))\r\n      \r\n    };\r\n\r\n  return (\r\n    <div className='createReportPage'>\r\n      <Formik\r\n        initialValues={{\r\n          comment:\"\"\r\n        }}\r\n        validationSchema={\r\n          Yup.object().shape({\r\n          comment: Yup.string().required()\r\n        })}\r\n        onSubmit={(values, {setSubmitting, resetForm}) => {\r\n          fetch('http://localhost:3001/createtimereports',{\r\n            method: 'POST',\r\n            url: 'https://api.notion.com/v1/pages',\r\n            body: (\r\n              JSON.stringify(values)),\r\n            headers: { \"Content-Type\": 'application/json' }\r\n          }) \r\n\r\n          // setTimeout(() => {\r\n          //   alert(JSON.stringify(values, null, 2))\r\n          //   resetForm();\r\n          //   setSubmitting(false)\r\n          // }, 2000)\r\n        }}\r\n        >\r\n        {props => (\r\n        <Form className=\"container\"> \r\n          <CustomTextInput label=\"Comment\" name=\"comment\" type=\"text\" placeholder='ex. fixed this bug...'/>\r\n          <label className=\"input\">Comment:</label>\r\n          \r\n\r\n          <button type='submit' className=\"button\">{props.isSubmitting ? 'loading...' : 'Submit'}</button>\r\n        </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default AddComment;\r\n"]},"metadata":{},"sourceType":"module"}