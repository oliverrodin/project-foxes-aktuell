{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\project-foxes-aktuell\\\\frontend\\\\src\\\\Pages\\\\Weeks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BarChart } from '../Components/Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Weeks() {\n  _s();\n\n  const fetchInfo = async () => {\n    let name = [];\n    let hours = [];\n    const res = await axios.post(\"http://localhost:3001/getdatabase/people\", {\n      data: \" \"\n    }, {\n      headers: {\n        accessToken: sessionStorage.getItem(\"accessToken\")\n      }\n    }).then(res => {\n      for (const dataObj of res.data.data) {\n        name.push(dataObj.name);\n        hours.push(dataObj.hours);\n      }\n    });\n    setChartData({\n      labels: data.data.map(crypto => crypto.name),\n      datasets: [{\n        label: \"Price in USD\",\n        data: data.data.map(crypto => crypto.priceUsd),\n        backgroundColor: [\"#ffbb11\", \"#ecf0f1\", \"#50AF95\", \"#f3ba2f\", \"#2a71d0\"]\n      }]\n    });\n  };\n\n  useEffect(() => {\n    fetchInfo();\n  }, []);\n  const [information, setInformation] = useState({});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      chartData: information\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Weeks, \"f7Pj3tmpaC6GPKETdNgySp2EfWQ=\");\n\n_c = Weeks;\nexport default Weeks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weeks\");","map":{"version":3,"sources":["C:/REACT/project-foxes-aktuell/frontend/src/Pages/Weeks.js"],"names":["React","useEffect","useState","axios","BarChart","Weeks","fetchInfo","name","hours","res","post","data","headers","accessToken","sessionStorage","getItem","then","dataObj","push","setChartData","labels","map","crypto","datasets","label","priceUsd","backgroundColor","information","setInformation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAMC,SAAS,GAAG,YAAY;AAC1B,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,0CAAX,EAAuD;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAvD,EAAoE;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,WAAW,EAAEC,cAAc,CAACC,OAAf,CAAuB,aAAvB;AAAf;AAAX,KAApE,EACjBC,IADiB,CACXP,GAAG,IAAI;AACV,WAAK,MAAMQ,OAAX,IAAsBR,GAAG,CAACE,IAAJ,CAASA,IAA/B,EAAoC;AAChCJ,QAAAA,IAAI,CAACW,IAAL,CAAUD,OAAO,CAACV,IAAlB;AACAC,QAAAA,KAAK,CAACU,IAAN,CAAWD,OAAO,CAACT,KAAnB;AACH;AAEJ,KAPiB,CAAlB;AAQAW,IAAAA,YAAY,CAAC;AACTC,MAAAA,MAAM,EAAET,IAAI,CAACA,IAAL,CAAUU,GAAV,CAAeC,MAAD,IAAYA,MAAM,CAACf,IAAjC,CADC;AAETgB,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,cADT;AAEEb,QAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUU,GAAV,CAAeC,MAAD,IAAYA,MAAM,CAACG,QAAjC,CAFR;AAGEC,QAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,EAIf,SAJe,EAKf,SALe;AAHnB,OADQ;AAFD,KAAD,CAAZ;AAiBH,GA5BD;;AA8BAzB,EAAAA,SAAS,CAAC,MAAM;AAGZK,IAAAA,SAAS;AAGZ,GANQ,EAMN,EANM,CAAT;AAQA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,EAAD,CAA9C;AAIF,sBACE;AAAA,2BACI,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEyB;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADF;AAKD;;GAjDQtB,K;;KAAAA,K;AAmDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { BarChart } from '../Components/Chart'\r\n\r\nfunction Weeks() {\r\n    \r\n    const fetchInfo = async () => {\r\n        let name = [];\r\n        let hours = [];\r\n        const res = await axios.post(\"http://localhost:3001/getdatabase/people\", {data: \" \"}, { headers: { accessToken: sessionStorage.getItem(\"accessToken\")}})\r\n        .then( res => {\r\n            for (const dataObj of res.data.data){\r\n                name.push(dataObj.name)\r\n                hours.push(dataObj.hours)\r\n            }\r\n            \r\n        })\r\n        setChartData({\r\n            labels: data.data.map((crypto) => crypto.name),\r\n            datasets: [\r\n              {\r\n                label: \"Price in USD\",\r\n                data: data.data.map((crypto) => crypto.priceUsd),\r\n                backgroundColor: [\r\n                  \"#ffbb11\",\r\n                  \"#ecf0f1\",\r\n                  \"#50AF95\",\r\n                  \"#f3ba2f\",\r\n                  \"#2a71d0\"\r\n                ]\r\n              }\r\n            ]\r\n          });\r\n    \r\n    }\r\n  \r\n    useEffect(() => {\r\n        \r\n\r\n        fetchInfo()\r\n       \r\n       \r\n    }, [])\r\n\r\n    const [information, setInformation] = useState({})\r\n\r\n    \r\n\r\n  return (\r\n    <>\r\n        <BarChart chartData={information} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Weeks"]},"metadata":{},"sourceType":"module"}