{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\project-foxes-aktuell\\\\frontend\\\\src\\\\Pages\\\\CreateReport.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { React, useContext, useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\nimport * as Yup from 'yup';\nimport axios from \"axios\";\nimport { LoginContext } from \"../Context/LoginContext\";\nimport './CreateReport.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst database_id = '58d96ae9275547a7960f5cca7c93e836';\n\nconst CustomTextInput = _ref => {\n  _s();\n\n  let {\n    label,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), meta.touch && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(CustomTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = CustomTextInput;\n\nconst CustomCheckbox = _ref2 => {\n  _s2();\n\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const [field, meta] = useField(props, 'checkbox');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"checkbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), meta.touch && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s2(CustomCheckbox, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c2 = CustomCheckbox;\n\nconst CustomSelect = _ref3 => {\n  _s3();\n\n  let {\n    label,\n    ...props\n  } = _ref3;\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), meta.touch && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s3(CustomSelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c3 = CustomSelect;\n\nfunction CreateReport() {\n  _s4();\n\n  const [project, setProject] = useState([]);\n  const [person, setPerson] = useState([]);\n  const {\n    name,\n    loginId\n  } = useContext(LoginContext);\n  useEffect(() => {\n    axios.post(\"http://localhost:3001/getdatabase/project\").then(response => {\n      setProject(response.data);\n    });\n    axios.post(\"http://localhost:3001/getdatabase/people\").then(response => {\n      setPerson(response.data);\n    });\n  }, []);\n  console.log(project);\n  /* const Projects = () => {\r\n    return(\r\n      <>\r\n        <options></option>\r\n      </>\r\n    )\r\n  } */\n  // const onSubmit = (data) => {\n  //     fetch('http://localhost:3001/createtimereports',{\n  //     method: 'POST',\n  //     url: 'https://api.notion.com/v1/pages',\n  //     body: (\n  //       JSON.stringify(data)),\n  //     headers: { \"Content-Type\": 'application/json',\n  //                 accessToken: sessionStorage.getItem(\"accessToken\")}\n  //   }) \n  //    console.log(JSON.stringify(data))\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createReportPage\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        project: \"\",\n        date: \"\",\n        hours: \"\",\n        note: \"\",\n        comment: \"\"\n      },\n      validationSchema: Yup.object().shape({\n        person: Yup.string().required(),\n        project: Yup.string().required(),\n        date: Yup.date().required(),\n        hours: Yup.number().required(),\n        note: Yup.string().required(),\n        comment: Yup.string().required()\n      }),\n      onSubmit: (values, _ref4) => {\n        let {\n          setSubmitting,\n          resetForm\n        } = _ref4;\n        axios.post('http://localhost:3001/createtimereports', values, {\n          headers: {\n            accessToken: sessionStorage.getItem(\"accessToken\")\n          }\n        });\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          resetForm();\n          setSubmitting(false);\n        }, 2000); // fetch('http://localhost:3001/createtimereports',{\n        //   method: 'POST',\n        //   url: 'https://api.notion.com/v1/pages',\n        //   body: (\n        //     JSON.stringify(values)),\n        //   headers: { \"Content-Type\": 'application/json'}\n        // }) \n      },\n      children: props => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create time report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          className: \"timeReportInput\",\n          label: \"Project\",\n          name: \"project\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Project\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), project.map(pages => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pages.id,\n                children: pages.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n          className: \"timeReportInput\",\n          label: \"Date\",\n          name: \"date\",\n          type: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n          className: \"timeReportInput\",\n          label: \"Hours\",\n          name: \"hours\",\n          type: \"number\",\n          placeholder: \"ex. 10...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n          className: \"timeReportInput\",\n          label: \"Note\",\n          name: \"note\",\n          type: \"text\",\n          placeholder: \"ex. meeting...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomTextInput, {\n          className: \"timeReportInput\",\n          label: \"Comment\",\n          name: \"comment\",\n          type: \"text\",\n          placeholder: \"ex. fixed this bug...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btnPos\",\n          children: props.isSubmitting ? 'loading...' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(CreateReport, \"2E2QACQGG+MeLdsLxh0S5CiNdAU=\");\n\n_c4 = CreateReport;\nexport default CreateReport;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CustomTextInput\");\n$RefreshReg$(_c2, \"CustomCheckbox\");\n$RefreshReg$(_c3, \"CustomSelect\");\n$RefreshReg$(_c4, \"CreateReport\");","map":{"version":3,"sources":["C:/REACT/project-foxes-aktuell/frontend/src/Pages/CreateReport.js"],"names":["React","useContext","useEffect","useState","Formik","Form","Field","ErrorMessage","useField","Yup","axios","LoginContext","database_id","CustomTextInput","label","props","field","meta","id","name","touch","error","CustomCheckbox","children","CustomSelect","CreateReport","project","setProject","person","setPerson","loginId","post","then","response","data","console","log","date","hours","note","comment","object","shape","string","required","number","values","setSubmitting","resetForm","headers","accessToken","sessionStorage","getItem","setTimeout","alert","JSON","stringify","map","pages","isSubmitting"],"mappings":"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","sourcesContent":["import {React, useContext, useEffect, useState}from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage, useField } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport axios from \"axios\";\r\nimport { LoginContext } from \"../Context/LoginContext\";\r\nimport './CreateReport.css'\r\n\r\nconst database_id = '58d96ae9275547a7960f5cca7c93e836'\r\n\r\nconst CustomTextInput = ({label, ...props}) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field}{...props} />\r\n      {meta.touch && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div> ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CustomCheckbox = ({children, ...props}) => {\r\n  const [field, meta] = useField(props, 'checkbox')\r\n\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field}{...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touch && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div> ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CustomSelect = ({label, ...props}) => {\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select {...field}{...props} />\r\n      {meta.touch && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div> ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nfunction CreateReport() {\r\n    const [project, setProject] = useState([])\r\n    const [person, setPerson] = useState([])\r\n    const { name, loginId } = useContext(LoginContext)\r\n\r\n    useEffect(()  => {\r\n     axios.post(\"http://localhost:3001/getdatabase/project\").then((response) => {\r\n        setProject(response.data)\r\n        \r\n      }) \r\n\r\n      axios.post(\"http://localhost:3001/getdatabase/people\").then((response) => {\r\n        setPerson(response.data)\r\n        \r\n      }) \r\n      \r\n    }, [])\r\n\r\n    console.log(project)\r\n\r\n    /* const Projects = () => {\r\n      return(\r\n        <>\r\n          <options></option>\r\n        </>\r\n      )\r\n    } */\r\n    \r\n    // const onSubmit = (data) => {\r\n\r\n    //     fetch('http://localhost:3001/createtimereports',{\r\n    //     method: 'POST',\r\n    //     url: 'https://api.notion.com/v1/pages',\r\n    //     body: (\r\n    //       JSON.stringify(data)),\r\n    //     headers: { \"Content-Type\": 'application/json',\r\n    //                 accessToken: sessionStorage.getItem(\"accessToken\")}\r\n    //   }) \r\n      \r\n    //    console.log(JSON.stringify(data))\r\n      \r\n    // };\r\n\r\n  return (\r\n    <div className='createReportPage'>\r\n      <Formik\r\n        initialValues={{\r\n          \r\n          project: \"\",\r\n          date: \"\",\r\n          hours: \"\",\r\n          note:\"\",\r\n          comment:\"\"\r\n        }}\r\n        validationSchema={\r\n          Yup.object().shape({\r\n          person: Yup.string().required(),\r\n          project: Yup.string().required(),\r\n          date: Yup.date().required(),\r\n          hours:Yup.number().required(),\r\n          note: Yup.string().required(),\r\n          comment: Yup.string().required()\r\n        })}\r\n        onSubmit={(values, {setSubmitting, resetForm}) => {\r\n          axios\r\n            .post('http://localhost:3001/createtimereports', \r\n              values,\r\n              {\r\n                headers: {\r\n                  accessToken: sessionStorage.getItem(\"accessToken\")\r\n                }\r\n              }\r\n            )\r\n            \r\n            setTimeout(() => {\r\n              alert(JSON.stringify(values, null, 2))\r\n              resetForm();\r\n              setSubmitting(false)\r\n            }, 2000)\r\n            \r\n          // fetch('http://localhost:3001/createtimereports',{\r\n          //   method: 'POST',\r\n          //   url: 'https://api.notion.com/v1/pages',\r\n          //   body: (\r\n          //     JSON.stringify(values)),\r\n          //   headers: { \"Content-Type\": 'application/json'}\r\n          // }) \r\n\r\n          \r\n        }}\r\n        >\r\n        {props => (\r\n        <Form className=\"container\">\r\n          <h1>Create time report</h1>\r\n          <CustomSelect className=\"timeReportInput\" label=\"Project\" name=\"project\">\r\n            <option value=\"\">Select Project</option>  \r\n            {\r\n              project.map((pages) => {\r\n                return (\r\n                  <>\r\n                    <option value={pages.id}>{pages.name}</option> \r\n                  </>\r\n                )\r\n                \r\n              })\r\n            }\r\n          </CustomSelect>   \r\n          <CustomTextInput className=\"timeReportInput\" label=\"Date\" name=\"date\" type=\"date\"/>\r\n          <CustomTextInput className=\"timeReportInput\" label=\"Hours\" name=\"hours\" type=\"number\" placeholder='ex. 10...'/>\r\n          <CustomTextInput className=\"timeReportInput\" label=\"Note\" name=\"note\" type=\"text\" placeholder='ex. meeting...'/>\r\n          <CustomTextInput className=\"timeReportInput\" label=\"Comment\" name=\"comment\" type=\"text\" placeholder='ex. fixed this bug...'/>\r\n          \r\n          \r\n\r\n          <button type='submit' className=\"btnPos\">{props.isSubmitting ? 'loading...' : 'Submit'}</button>\r\n        </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default CreateReport;\r\n"]},"metadata":{},"sourceType":"module"}